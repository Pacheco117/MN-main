import numpy as np
import matplotlib.pyplot as plt

# Función original
def f(x):
    return np.sin(x) - x / 2

# Interpolación de Lagrange
def lagrange_interpolation(x, x_points, y_points):
    n = len(x_points)
    result = 0
    for i in range(n):
        term = y_points[i]
        for j in range(n):
            if i != j:
                term *= (x - x_points[j]) / (x_points[i] - x_points[j])
        result += term
    return result

# Método de Bisección
def bisect(func, a, b, tol=1e-6, max_iter=100):
    if func(a) * func(b) > 0:
        raise ValueError("El intervalo no contiene una raíz")

    iterations = []

    for _ in range(max_iter):
        c = (a + b) / 2
        iterations.append(c)

        if abs(func(c)) < tol or (b - a) / 2 < tol:
            return c, iterations

        if func(a) * func(c) < 0:
            b = c
        else:
            a = c

    return (a + b) / 2, iterations

# Selección de tres puntos equidistantes en [0, 2]
x_points = np.linspace(0, 2, 3)
y_points = f(x_points)

# Construcción del polinomio interpolante
x_vals = np.linspace(0, 2, 300)
y_interp = [lagrange_interpolation(x, x_points, y_points) for x in x_vals]

# Encontrar raíz del polinomio interpolante usando bisección
root, iterations = bisect(lambda x: lagrange_interpolation(x, x_points, y_points), 0, 2)

# Cálculo de errores
true_root = 1.8954942670339806  # Aproximación de la raíz real
absolute_error = abs(root - true_root)
relative_error = absolute_error / true_root
quadratic_error = absolute_error ** 2

# Gráfica de la función original y el polinomio interpolante
plt.figure(figsize=(10, 6))
plt.plot(x_vals, f(x_vals), label="f(x) = sin(x) - x/2", linestyle='dashed', color='blue')
plt.plot(x_vals, y_interp, label="Polinomio Interpolante de Lagrange", color='red')
plt.axhline(0, color='black', linewidth=0.5, linestyle='--')
plt.axvline(root, color='green', linestyle='dotted', label=f"Raíz aproximada: {root:.6f}")
plt.scatter(x_points, y_points, color='black', label="Puntos de interpolación")
plt.xlabel("x")
plt.ylabel("f(x)")
plt.title("Interpolación de Lagrange y Búsqueda de Raíces")
plt.legend()
plt.grid(True)
plt.savefig("interpolacion_lagrange_raiz.png")
plt.show()

# Gráfica de convergencia
plt.figure(figsize=(8, 5))
plt.plot(range(len(iterations)), iterations, marker='o', linestyle='-', color='purple')
plt.xlabel("Iteraciones")
plt.ylabel("Aproximación de la raíz")
plt.title("Convergencia del Método de Bisección")
plt.grid(True)
plt.savefig("convergencia_biseccion.png")
plt.show()

# Imprimir resultados y errores
print(f"Raíz aproximada usando interpolación: {root:.6f}")
print(f"Error absoluto: {absolute_error:.6f}")
print(f"Error relativo: {relative_error:.6%}")
print(f"Error cuadrático: {quadratic_error:.6f}")
print("Iteraciones de la bisección:", iterations)
